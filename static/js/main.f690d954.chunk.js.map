{"version":3,"sources":["api/state.js","Context/contex-utils.js","Context/trivia-context.js","Components/TriviaCard/TriviaCard.jsx","Components/TriviaCardLoading/TriviaCardLoading.jsx","Components/Layout/Layout.jsx","Components/Header/Header.js","Components/LinkButton/LinkButton.jsx","Components/Score/Score.jsx","utils/constants.js","Pages/Intro/IntroPage.jsx","api/index.js","Containers/PaginationContainer/PaginationContainer.jsx","Containers/AnswerContainer/AnswerContainer.jsx","Containers/TriviaCardContainer/TriviaCardContainer.jsx","Containers/ResultListContainer/ResultItem.jsx","Containers/ResultListContainer/ResultListContainer.jsx","Pages/Trivia/TriviaPage.jsx","Pages/Results/ResultsPage.jsx","App.js","reportWebVitals.js","index.js"],"names":["SESSION_STORAGE_KEY","saveState","state","window","sessionStorage","setItem","JSON","stringify","decodeHtml","html","txt","document","createElement","innerHTML","value","evalResult","question","answer","correctAnswer","correct_answer","toLowerCase","Boolean","toString","TriviaContext","React","createContext","FORWARD","initAction","questions","type","payload","paginationAction","actionType","initialState","currentQuestion","undefined","currentAnswer","index","total","started","answers","evals","correct","triviaReducer","action","length","i","newIndex","answersCopy","evalsCopy","result","newState","Error","TriviaProvider","children","useReducer","dispatch","Provider","useTrivia","context","useContext","DISPLAY_NAME","TriviaCard","title","className","TriviaCardLoading","icon","faHourglass","Layout","Header","Body","Footer","propTypes","PropTypes","array","isRequired","MainNavigation","to","activeClassName","LinkButton","text","onClick","history","useHistory","push","defaultProps","Score","constants","intro","welcomeText","intructionsText","challengeText","ctaText","results","back","tryAgain","IntroPage","responseShape","errors","getUrl","diff","qty","fetchQuestions","a","difficulty","fetch","response","json","PaginationContainer","paginationClickHandler","faFastBackward","faStepBackward","faStepForward","faFastForward","AnswerIcon","responded","faCheck","faStop","AnswerContainer","answerClickHandler","displayText","icons","getIconsByAnswer","TriviaCardContainer","useEffect","initApp","category","current","answerAction","ResultItem","ResultListContainer","map","q","e","TriviaPage","ResultsPage","App","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.f690d954.chunk.js","sourcesContent":["const SESSION_STORAGE_KEY = 'trivia';\n\nexport const saveState = (state) => {\n  const storage = window.sessionStorage;\n  storage.setItem(SESSION_STORAGE_KEY, JSON.stringify(state));\n};\n\nexport const loadState = () => {\n  const storage = window.sessionStorage;\n  const value = storage.getItem(SESSION_STORAGE_KEY);\n  let state;\n  if (value) {\n    state = JSON.parse(value);\n  }\n  return state;\n};\n","export const decodeHtml = (html) => {\n  const txt = document.createElement('textarea');\n  txt.innerHTML = html;\n  return txt.value;\n};\n\nexport const evalResult = (question, answer) => {\n  const { correct_answer: correctAnswer } = question;\n  if (answer === -1) return false;\n  return correctAnswer.toLowerCase() === Boolean(answer).toString();\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { saveState } from '../api/state';\nimport { decodeHtml, evalResult } from './contex-utils';\n\nconst TriviaContext = React.createContext();\n\nexport const FAST_BACKWARD = 'fastBackward';\nexport const BACKWARD = 'backward';\nexport const FORWARD = 'forward';\nexport const FAST_FORWARD = 'fastForward';\n\n// actions start\nfunction resetAction () {\n  return {\n    type: 'reset'\n  };\n}\nfunction initAction (questions) {\n  return {\n    type: 'init',\n    payload: { questions }\n  };\n}\n// answer could be: 1 for true, 0 for false, -1 for unanswered\nfunction answerAction (index, answer) {\n  return {\n    type: 'answer',\n    payload: { index, answer }\n  };\n}\nfunction paginationAction (actionType) {\n  return {\n    type: actionType\n  };\n}\n// actions end\n\n// reducer start\nconst initialState = {\n  questions: [],\n  currentQuestion: undefined,\n  currentAnswer: -1,\n  index: 0,\n  total: 0,\n  started: false,\n  answers: [],\n  evals: [],\n  correct: 0\n};\n\nfunction triviaReducer (state = initialState, action) {\n  switch (action.type) {\n    case 'init': {\n      const {\n        payload: { questions }\n      } = action;\n      // init answers\n      const total = questions.length || 0;\n      const answers = [];\n      const evals = [];\n      for (let i = 0; i < total; i++) {\n        answers[i] = -1;\n        questions[i].question = decodeHtml(questions[i].question);\n        evals[i] = false;\n      }\n      return {\n        ...state,\n        questions,\n        currentQuestion: questions[0],\n        currentAnswer: -1,\n        index: 0,\n        total: total,\n        answers,\n        evals\n      };\n    }\n    case 'fastBackward': {\n      const { answers, questions } = state;\n      const newIndex = 0;\n      return {\n        ...state,\n        currentQuestion: questions[newIndex],\n        currentAnswer: answers[newIndex],\n        index: newIndex\n      };\n    }\n    case 'backward': {\n      const { answers, questions, index } = state;\n      const newIndex = index > 0 ? index - 1 : index;\n      return {\n        ...state,\n        currentQuestion: questions[newIndex],\n        currentAnswer: answers[newIndex],\n        index: newIndex\n      };\n    }\n    case 'forward': {\n      const { answers, questions, index, total } = state;\n      const newIndex = index < total - 1 ? index + 1 : index;\n      return {\n        ...state,\n        currentQuestion: questions[newIndex],\n        currentAnswer: answers[newIndex],\n        index: newIndex\n      };\n    }\n    case 'fastForward': {\n      const { answers, questions, total } = state;\n      const newIndex = total - 1;\n      return {\n        ...state,\n        currentQuestion: questions[newIndex],\n        currentAnswer: answers[newIndex],\n        index: newIndex\n      };\n    }\n    case 'answer': {\n      const {\n        payload: { index, answer }\n      } = action;\n      const { answers, questions, evals, correct } = state;\n      const answersCopy = [...answers];\n      answersCopy[index] = answer;\n      const evalsCopy = [...evals];\n      const result = evalResult(questions[index], answer);\n      evalsCopy[index] = result;\n      const newState = {\n        ...state,\n        answers: answersCopy,\n        currentAnswer: answer,\n        evals: evalsCopy,\n        correct: result ? correct + 1 : correct\n      };\n      saveState(newState);\n      return newState;\n    }\n    case 'reset': {\n      return {\n        ...initialState\n      };\n    }\n    default: {\n      throw new Error(`Unhandled action type: ${action.type}`);\n    }\n  }\n}\n// reducer end\n\n// provider\nfunction TriviaProvider ({ children }) {\n  const [state, dispatch] = React.useReducer(triviaReducer, initialState);\n  const value = { state, dispatch };\n  return (\n    <TriviaContext.Provider value={value}>{children}</TriviaContext.Provider>\n  );\n}\n\nTriviaProvider.propTypes = {\n  children: PropTypes.string.isRequired\n};\n\n// hook\nfunction useTrivia () {\n  const context = React.useContext(TriviaContext);\n  if (context === undefined) {\n    throw new Error('useTrivia must be used within a TriviaProvider');\n  }\n  return context;\n}\n\nexport {\n  answerAction,\n  TriviaProvider,\n  useTrivia,\n  initAction,\n  paginationAction,\n  resetAction\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './TriviaCard.css';\n\nconst DISPLAY_NAME = 'trivia_card';\n\nconst TriviaCard = ({\n  title,\n  question\n}) => {\n  return (\n    <div className={DISPLAY_NAME}>\n      <section className={`${DISPLAY_NAME}__title ${DISPLAY_NAME}__section`}>\n        <h1>{title}</h1>\n      </section>\n      <section className={`${DISPLAY_NAME}__question ${DISPLAY_NAME}__section`}>\n        <p>{question}</p>\n      </section>\n    </div>\n  );\n};\n\nTriviaCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  question: PropTypes.string.isRequired\n};\n\nexport default TriviaCard;\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faHourglass } from '@fortawesome/free-solid-svg-icons';\nimport './TriviaCardLoading.css';\n\nconst DISPLAY_NAME = 'trivia_card-loading';\n\nconst TriviaCardLoading = () => {\n  return (\n    <div className={DISPLAY_NAME}>\n      <section className={`${DISPLAY_NAME}__title ${DISPLAY_NAME}__section`}>\n        <p>loading questions ...</p>\n      </section>\n      <section className={`${DISPLAY_NAME}__question ${DISPLAY_NAME}__section`}>\n        <FontAwesomeIcon icon={faHourglass} className={`${DISPLAY_NAME}__hour-glass`} />\n      </section>\n    </div>\n  );\n};\n\nexport default TriviaCardLoading;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Layout.css';\n\nconst Layout = ({ children }) => <main className='app layout'>{children}</main>;\nLayout.Header = ({ children }) => <header className='app layout__header'>{children}</header>;\nLayout.Body = ({ children }) => <div className=\"app layout__body\">{children}</div>;\nLayout.Footer = ({ children }) => <footer className=\"app layout__footer\">{children}</footer>;\n\nLayout.propTypes = {\n  children: PropTypes.array.isRequired\n};\nLayout.Header.propTypes = {\n  children: PropTypes.array.isRequired\n};\nLayout.Body.propTypes = {\n  children: PropTypes.array.isRequired\n};\nLayout.Footer.propTypes = {\n  children: PropTypes.array.isRequired\n};\n\nexport default Layout;\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nimport './Header.css';\n\nconst DISPLAY_NAME = 'trivia-header';\n\nconst MainNavigation = () => {\n  return (\n    <header className={`${DISPLAY_NAME}`}>\n      <div className={`${DISPLAY_NAME}__logo`}>Trivia</div>\n      <nav className={`${DISPLAY_NAME}__nav`}>\n        <ul>\n          <li>\n            <NavLink to='/' activeClassName={`${DISPLAY_NAME}__active`}>\n              Home\n            </NavLink>\n          </li>\n          <li>\n            <NavLink to='/trivia' activeClassName={`${DISPLAY_NAME}__active`}>\n              Trivia\n            </NavLink>\n          </li>\n          <li>\n            <NavLink to='/results' activeClassName={`${DISPLAY_NAME}__active`}>\n              Results\n            </NavLink>\n          </li>\n        </ul>\n      </nav>\n    </header>\n  );\n};\n\nexport default MainNavigation;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useHistory } from 'react-router-dom';\nimport { resetAction, useTrivia } from '../../Context/trivia-context';\n\nimport './LinkButton.css';\n\nconst DISPLAY_NAME = 'trivia-link-button';\n\nconst LinkButton = ({ text, className, to, onClick }) => {\n  const history = useHistory();\n  const { dispatch } = useTrivia();\n  const onClickHandler = () => {\n    if (onClick && typeof (onClick) === 'function') {\n      onClick();\n    }\n    dispatch(resetAction());\n    history.push(to);\n  };\n  return (\n    <div className={`${DISPLAY_NAME} ${className}`} onClick={onClickHandler}>\n      {text}\n    </div>\n  );\n};\n\nLinkButton.defaultProps = {\n  className: '',\n  onClick: undefined\n};\n\nLinkButton.propTypes = {\n  text: PropTypes.string.isRequired,\n  to: PropTypes.string.isRequired,\n  className: PropTypes.string,\n  onClick: PropTypes.func\n};\n\nexport default LinkButton;\n","import React from 'react';\nimport { useTrivia } from '../../Context/trivia-context';\n\nimport './Score.css';\n\nconst DISPLAY_NAME = 'trivia-app-score';\n\nconst Score = () => {\n  const {\n    state: { correct, total }\n  } = useTrivia();\n  return (\n    <div className={DISPLAY_NAME}>\n      <h1>You scored</h1>\n      <h2>{correct}/{total}</h2>\n    </div>\n  );\n};\n\nexport default Score;\n","const constants = {\n  intro: {\n    welcomeText: 'Welcome to the trivia challenge!',\n    intructionsText: 'You will be presented with 10 True of False questions.',\n    challengeText: 'Can you score 100%',\n    ctaText: 'Go!'\n  },\n  results: {\n    back: 'back to your answers',\n    tryAgain: 'Give it another try'\n  }\n};\n\nexport default constants;\n","import React from 'react';\nimport { LinkButton } from '../../Components';\nimport constants from '../../utils/constants';\n\nimport './IntroPage.css';\n\nconst DISPLAY_NAME = 'trivia-app-intro_page';\n\nconst IntroPage = () => {\n  return (\n    <div className={DISPLAY_NAME}>\n      <h1>{constants.intro.welcomeText}</h1>\n      <h2>{constants.intro.intructionsText}</h2>\n      <h3>{constants.intro.challengeText}</h3>\n      <LinkButton text={constants.intro.ctaText} to='/trivia' />\n    </div>\n  );\n};\n\nexport default IntroPage;\n","const responseShape = {\n  errors: [],\n  questions: []\n};\n\nconst getUrl = (diff, qty) => {\n  return `https://opentdb.com/api.php?amount=${qty}&difficulty=${diff}&type=boolean`;\n};\n\nconst fetchQuestions = async (difficulty = 'easy', qty = 10) => {\n  try {\n    const response = await fetch(getUrl(difficulty, qty));\n    const json = await response.json();\n    const { results } = json;\n    return results;\n  } catch (error) {\n    return {\n      ...responseShape,\n      errors: [error]\n    };\n  }\n};\n\nexport default fetchQuestions;\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n  faFastBackward,\n  faStepBackward,\n  faStepForward,\n  faFastForward\n} from '@fortawesome/free-solid-svg-icons';\nimport {\n  paginationAction,\n  useTrivia,\n  FAST_BACKWARD,\n  BACKWARD,\n  FORWARD,\n  FAST_FORWARD\n} from '../../Context/trivia-context';\nimport './PaginationContainer.css';\n\nconst DISPLAY_NAME = 'pagination_container';\n\nconst PaginationContainer = () => {\n  const {\n    dispatch,\n    state: { index, total }\n  } = useTrivia();\n\n  const paginationClickHandler = (actionType) => {\n    dispatch(paginationAction(actionType));\n  };\n\n  return (\n    <div className={DISPLAY_NAME}>\n      <div\n        className={`${DISPLAY_NAME}__icon`}\n        onClick={() => paginationClickHandler(FAST_BACKWARD)}\n      >\n        <FontAwesomeIcon icon={faFastBackward} />\n      </div>\n      <div\n        className={`${DISPLAY_NAME}__icon`}\n        onClick={() => paginationClickHandler(BACKWARD)}\n      >\n        <FontAwesomeIcon icon={faStepBackward} />\n      </div>\n      <div className={`${DISPLAY_NAME}__counter ${DISPLAY_NAME}__current-page`}>\n        <span className={`${DISPLAY_NAME}__counter-value`}>{index + 1}</span>{' '}\n        out of <span className={`${DISPLAY_NAME}__counter-value`}>{total}</span>\n      </div>\n      <div\n        className={`${DISPLAY_NAME}__icon`}\n        onClick={() => paginationClickHandler(FORWARD)}\n      >\n        <FontAwesomeIcon icon={faStepForward} />\n      </div>\n      <div\n        className={`${DISPLAY_NAME}__icon`}\n        onClick={() => paginationClickHandler(FAST_FORWARD)}\n      >\n        <FontAwesomeIcon icon={faFastForward} />\n      </div>\n    </div>\n  );\n};\n\nexport default PaginationContainer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCheck, faStop } from '@fortawesome/free-solid-svg-icons';\nimport './AnswerContainer.css';\n\nconst DISPLAY_NAME = 'answer-container';\n\nconst AnswerIcon = ({ value, onClick, responded }) => {\n  const onClickHandler = () => {\n    if (!responded) {\n      onClick(value);\n    }\n  };\n  return (\n    <div\n      className={`${DISPLAY_NAME}__options-${value.toString()} ${DISPLAY_NAME}__icon ${\n        responded && 'responded'\n      }`}\n      onClick={onClickHandler}\n    >\n      <FontAwesomeIcon icon={value ? faCheck : faStop} />\n    </div>\n  );\n};\n\nAnswerIcon.propTypes = {\n  value: PropTypes.number.isRequired,\n  onClick: PropTypes.func.isRequired,\n  responded: PropTypes.bool\n};\n\nAnswerIcon.defaultProps = {\n  responded: false\n};\n\nconst AnswerContainer = ({ answer, answerClickHandler }) => {\n  const displayText = answer !== -1 ? 'Your answer was' : 'Select your answer';\n  const getIconsByAnswer = () => {\n    const icons = [];\n    const responded = answer !== undefined && answer !== -1;\n    if (responded) {\n      icons.push(\n        <AnswerIcon\n          value={answer}\n          onClick={answerClickHandler}\n          responded\n          key=\"t-icon\"\n        />\n      );\n    } else {\n      icons.push(\n        <AnswerIcon value={true} onClick={answerClickHandler} key=\"t-icon\" />\n      );\n      icons.push(\n        <AnswerIcon value={false} onClick={answerClickHandler} key=\"f-icon\" />\n      );\n    }\n    return icons;\n  };\n  return (\n    <div className={DISPLAY_NAME}>\n      <div className={`${DISPLAY_NAME}__intro`}>{displayText}</div>\n      <div className={`${DISPLAY_NAME}__options`}>{getIconsByAnswer()}</div>\n    </div>\n  );\n};\n\nAnswerContainer.propTypes = {\n  answer: PropTypes.number.isRequired,\n  answerClickHandler: PropTypes.func.isRequired\n};\n\nexport default AnswerContainer;\n","import React, { useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport fetchQuestions from '../../api';\nimport { useTrivia, answerAction, initAction, FORWARD, paginationAction } from '../../Context/trivia-context';\nimport { TriviaCard, TriviaCardLoading } from '../../Components';\nimport PaginationContainer from '../PaginationContainer/PaginationContainer';\nimport AnswerContainer from '../AnswerContainer/AnswerContainer';\nimport './TriviaCardContainer.css';\n\nconst DISPLAY_NAME = 'trivia-card-container';\n\nconst TriviaCardContainer = () => {\n  const {\n    dispatch,\n    state: { currentAnswer, currentQuestion, index, total }\n  } = useTrivia();\n  const history = useHistory();\n  useEffect(() => {\n    async function initApp () {\n      if (!currentQuestion) {\n        const questions = await fetchQuestions();\n        dispatch(initAction(questions));\n      }\n    }\n    initApp();\n  }, [dispatch, currentQuestion]);\n  const answerClickHandler = (value) => {\n    dispatch(answerAction(index, value));\n    dispatch(paginationAction(FORWARD));\n    if (index === total - 1) {\n      history.push('/results');\n    }\n  };\n  return currentQuestion\n    ? (\n    <div className={DISPLAY_NAME}>\n      <TriviaCard\n        question={currentQuestion.question}\n        title={currentQuestion.category}\n        current={index + 1}\n        total={total}\n      />\n      <AnswerContainer answer={currentAnswer} answerClickHandler={answerClickHandler} />\n      <PaginationContainer />\n    </div>\n      )\n    : (\n    <TriviaCardLoading />\n      );\n};\n\nexport default TriviaCardContainer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCheck, faStop } from '@fortawesome/free-solid-svg-icons';\n\nimport './ResultItem.css';\n\nconst DISPLAY_NAME = 'result-item';\n\nconst ResultItem = ({ text, value = false }) => {\n  return (\n    <div className={DISPLAY_NAME}>\n      <FontAwesomeIcon\n        icon={value ? faCheck : faStop}\n        className={`${DISPLAY_NAME}__icon ${DISPLAY_NAME}__icon-${value}`}\n      />\n      <p className={`${DISPLAY_NAME}__question`}>{text}</p>\n    </div>\n  );\n};\n\nResultItem.propTypes = {\n  text: PropTypes.string.isRequired,\n  value: PropTypes.bool.isRequired\n};\n\nexport default ResultItem;\n","import React from 'react';\nimport { useTrivia } from '../../Context/trivia-context';\nimport ResultItem from './ResultItem';\n\nimport './ResultListContainer.css';\n\nconst DISPLAY_NAME = 'result-list-container';\n\nconst ResultListContainer = () => {\n  const {\n    state: { evals, questions }\n  } = useTrivia();\n  return (\n    <div className={DISPLAY_NAME}>\n      {questions.map((q, i) => {\n        const e = evals[i];\n        return <ResultItem text={q.question} value={e} key={`result-${i}`} />;\n      })}\n    </div>\n  );\n};\n\nexport default ResultListContainer;\n","import React from 'react';\nimport { TriviaCardContainer } from '../../Containers';\nimport { Link } from 'react-router-dom';\nimport './Trivia.css';\n\nconst DISPLAY_NAME = 'trivia_app__trivia_page';\n\nconst TriviaPage = () => {\n  return (\n    <div className={DISPLAY_NAME}>\n      <TriviaCardContainer />\n      <Link to=\"/results\">\n          <div className={`${DISPLAY_NAME}-footer-cta intro-text`}>\n            results\n          </div>\n        </Link>\n    </div>\n  );\n};\n\nexport default TriviaPage;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './ResultsPage.css';\nimport { LinkButton, Score } from '../../Components';\nimport { ResultListContainer } from '../../Containers';\nimport constants from '../../utils/constants';\n\nconst DISPLAY_NAME = 'trivia-app-results-page';\n\nconst ResultsPage = () => {\n  return (\n    <div className={DISPLAY_NAME}>\n      <Score />\n      <ResultListContainer />\n      <Link to=\"/trivia\">{constants.results.back}</Link>\n      <LinkButton text={constants.results.tryAgain} to=\"/trivia\" />\n    </div>\n  );\n};\n\nexport default ResultsPage;\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport { Layout, Header } from './Components';\nimport { IntroPage, TriviaPage, ResultsPage } from './Pages';\nimport './App.css';\n\nfunction App () {\n  return (\n    <Layout>\n      <Layout.Header>\n        <Header />\n      </Layout.Header>\n      <Layout.Body>\n        <Switch>\n          <Route exact path=\"/\" component={IntroPage} />\n          <Route exact path=\"/trivia\" component={TriviaPage} />\n          <Route path=\"/results\" component={ResultsPage} />\n          {/* <Route component={NotFoundPage} /> */}\n        </Switch>\n      </Layout.Body>\n      {/* <Layout.Footer>\n        <Footer />\n      </Layout.Footer> */}\n    </Layout>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { TriviaProvider } from './Context/trivia-context';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <TriviaProvider>\n        <App />\n      </TriviaProvider>\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}